#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
${symbol_pound} MR: I have not customized this file at all, it's just the default oscache.properties
${symbol_pound} from the 2.0.1 download.

${symbol_pound} CACHE IN MEMORY
${symbol_pound}
${symbol_pound} If you want to disable memory caching, just uncomment this line.
${symbol_pound}
${symbol_pound} cache.memory=false


${symbol_pound} CACHE KEY
${symbol_pound}
${symbol_pound} This is the key that will be used to store the cache in the application
${symbol_pound} and session scope.
${symbol_pound}
${symbol_pound} If you want to set the cache key to anything other than the default
${symbol_pound} uncomment this line and change the cache.key
${symbol_pound}
${symbol_pound} cache.key=__oscache_cache


${symbol_pound} USE HOST DOMAIN NAME IN KEY
${symbol_pound}
${symbol_pound} Servers for multiple host domains may wish to add host name info to
${symbol_pound} the generation of the key.  If this is true, then uncomment the
${symbol_pound} following line.
${symbol_pound}
${symbol_pound} cache.use.host.domain.in.key=true


${symbol_pound} CACHE LISTENERS
${symbol_pound}
${symbol_pound} These hook OSCache events and perform various actions such as logging
${symbol_pound} cache hits and misses, or broadcasting to other cache instances across a cluster.
${symbol_pound} See the documentation for further information.
${symbol_pound}
${symbol_pound} cache.event.listeners=com.opensymphony.oscache.plugins.clustersupport.JMSBroadcastingListener,  ${symbol_escape}
${symbol_pound}                       com.opensymphony.oscache.extra.CacheEntryEventListenerImpl,               ${symbol_escape}
${symbol_pound}                       com.opensymphony.oscache.extra.CacheMapAccessEventListenerImpl,           ${symbol_escape}
${symbol_pound}                       com.opensymphony.oscache.extra.ScopeEventListenerImpl


${symbol_pound} CACHE PERSISTENCE CLASS
${symbol_pound}
${symbol_pound} Specify the class to use for persistence. If you use the supplied DiskPersistenceListener,
${symbol_pound} don't forget to supply the cache.path property to specify the location of the cache
${symbol_pound} directory.
${symbol_pound}
${symbol_pound} If a persistence class is not specified, OSCache will use memory caching only.
${symbol_pound}
${symbol_pound} cache.persistence.class=com.opensymphony.oscache.plugins.diskpersistence.DiskPersistenceListener


${symbol_pound} CACHE DIRECTORY
${symbol_pound}
${symbol_pound} This is the directory on disk where caches will be stored by the DiskPersistenceListener.
${symbol_pound} it will be created if it doesn't already exist. Remember that OSCache must have
${symbol_pound} write permission to this directory.
${symbol_pound}
${symbol_pound} Note: for Windows machines, this needs ${symbol_escape} to be escaped
${symbol_pound} ie Windows:
${symbol_pound} cache.path=c:${symbol_escape}${symbol_escape}myapp${symbol_escape}${symbol_escape}cache
${symbol_pound} or *ix:
${symbol_pound} cache.path=/opt/myapp/cache
${symbol_pound}
${symbol_pound} cache.path=c:${symbol_escape}${symbol_escape}app${symbol_escape}${symbol_escape}cache


${symbol_pound} CACHE ALGORITHM
${symbol_pound}
${symbol_pound} Default cache algorithm to use. Note that in order to use an algorithm
${symbol_pound} the cache size must also be specified. If the cache size is not specified,
${symbol_pound} the cache algorithm will be Unlimited cache.
${symbol_pound}
${symbol_pound} cache.algorithm=com.opensymphony.oscache.base.algorithm.LRUCache
${symbol_pound} cache.algorithm=com.opensymphony.oscache.base.algorithm.FIFOCache
${symbol_pound} cache.algorithm=com.opensymphony.oscache.base.algorithm.UnlimitedCache


${symbol_pound} CACHE SIZE
${symbol_pound}
${symbol_pound} Default cache size in number of items. If a size is specified but not
${symbol_pound} an algorithm, the cache algorithm used will be LRUCache.
${symbol_pound}
cache.capacity=10000


${symbol_pound} CACHE UNLIMITED DISK
${symbol_pound} Use unlimited disk cache or not. The default value is false, which means
${symbol_pound} the disk cache will be limited in size to the value specified by cache.capacity.
${symbol_pound}
${symbol_pound} cache.unlimited.disk=false


${symbol_pound} JMS CLUSTER PROPERTIES
${symbol_pound}
${symbol_pound} Configuration properties for JMS clustering. See the clustering documentation
${symbol_pound} for more information on these settings.
${symbol_pound}
${symbol_pound}cache.cluster.jms.topic.factory=java:comp/env/jms/TopicConnectionFactory
${symbol_pound}cache.cluster.jms.topic.name=java:comp/env/jms/OSCacheTopic
${symbol_pound}cache.cluster.jms.node.name=node1


${symbol_pound} JAVAGROUPS CLUSTER PROPERTIES
${symbol_pound}
${symbol_pound} Configuration properites for the JavaGroups clustering. Only one of these
${symbol_pound} should be specified. Default values (as shown below) will be used if niether
${symbol_pound} property is set. See the clustering documentation and the JavaGroups project
${symbol_pound} (www.javagroups.com) for more information on these settings.
${symbol_pound}
${symbol_pound}cache.cluster.properties=UDP(mcast_addr=231.12.21.132;mcast_port=45566;ip_ttl=32;mcast_send_buf_size=150000;mcast_recv_buf_size=80000):PING(timeout=2000;num_initial_members=3):MERGE2(min_interval=5000;max_interval=10000):FD_SOCK:VERIFY_SUSPECT(timeout=1500):pbcast.NAKACK(gc_lag=50;retransmit_timeout=300,600,1200,2400,4800):pbcast.STABLE(desired_avg_gossip=20000):UNICAST(timeout=5000):FRAG(frag_size=8096;down_thread=false;up_thread=false):pbcast.GMS(join_timeout=5000;join_retry_timeout=2000;shun=false;print_local_addr=true)
${symbol_pound}cache.cluster.multicast.ip=231.12.21.132
